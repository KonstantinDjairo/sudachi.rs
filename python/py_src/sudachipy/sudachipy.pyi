from typing import ClassVar,  Iterator, List
import sudachipy


class Dictionary:
    @classmethod
    def __init__(self, config_path: str = ...,
                 resource_dir: str = ...,  dict_type: str = None) -> None: ...

    def close(self) -> None: ...
    def create(self, mode: SplitMode = SplitMode.C) -> Tokenizer: ...


class Morpheme:
    @classmethod
    def __init__(self) -> None: ...
    def begin(self) -> int: ...
    def dictionary_form(self) -> str: ...
    def dictionary_id(self) -> int: ...
    def end(self) -> int: ...
    def get_word_info(self) -> WordInfo: ...
    def is_oov(self) -> bool: ...
    def normalized_form(self) -> str: ...
    def part_of_speech(self) -> List[str]: ...
    def part_of_speech_id(self) -> int: ...
    def reading_form(self) -> str: ...
    def split(self, mode: SplitMode) -> MorphemeList: ...
    def surface(self) -> str: ...
    def synonym_group_ids(self) -> List[int]: ...
    def word_id(self) -> int: ...


class MorphemeList:
    @classmethod
    def __init__(self) -> None: ...
    @classmethod
    def empty(dict) -> MorphemeList: ...
    def get_internal_cost(self) -> int: ...
    def size(self) -> int: ...
    def __getitem__(self, index) -> Morpheme: ...
    def __iter__(self) -> Iterator[Morpheme]: ...
    def __len__(self) -> int: ...


class SplitMode:
    A: ClassVar[SplitMode] = ...
    B: ClassVar[SplitMode] = ...
    C: ClassVar[SplitMode] = ...
    @classmethod
    def __init__(self) -> None: ...


class Tokenizer:
    SplitMode: ClassVar[sudachipy.SplitMode] = ...
    @classmethod
    def __init__(self) -> None: ...
    def tokenize(self, text: str,
                 mode: sudachipy.SplitMode = ...) -> MorphemeList: ...


class WordInfo:
    a_unit_split: ClassVar[List[int]] = ...
    b_unit_split: ClassVar[List[int]] = ...
    dictionary_form: ClassVar[str] = ...
    dictionary_form_word_id: ClassVar[int] = ...
    head_word_length: ClassVar[int] = ...
    normalized_form: ClassVar[str] = ...
    pos_id: ClassVar[int] = ...
    reading_form: ClassVar[str] = ...
    surface: ClassVar[str] = ...
    synonym_group_ids: ClassVar[List[int]] = ...
    word_structure: ClassVar[List[int]] = ...
    @classmethod
    def __init__(self) -> None: ...
    def length(self) -> int: ...
